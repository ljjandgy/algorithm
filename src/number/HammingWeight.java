package number;

/**
 * 给定一个32位的数字，求2进制展示时，1的数量（汉明重量）
 */
public class HammingWeight {
    /**
     * 循环判断有多少个1
     * 思路：
     * 1.利用2的i次方的数和原数进行与运算，如果得到的是1，则说明输入的当前味是1，否则是0
     * 2.<< 位左移运算，>>位右移运算
     * 补充：Integer.bitCount()也可以得到位1的数量
     */
    public int hammingWeightForEach(int n) {
        int ret = 0;
        for (int i = 0; i < 32; i++) {
            if ((n & (1 << i)) != 0) {
                ret++;
            }
        }
        return ret;
    }

    /**
     * 优化过的位运算，基于公式 n & (n−1)，其运算结果恰为把 nnn 的二进制位中的最低位的 111 变为 000 之后的结果 得出的优化方案
     * 如：6 & (6−1)=4,6=(110)2,4=(100)26~\&~(6-1) = 4, 6 = (110)_2, 4 = (100)_26 & (6−1)=4,6=(110)2,4=(100)2
     *  ，运算结果 444 即为把 666 的二进制位中的最低位的 111 变为 000 之后的结果。
     *
     * 这样我们可以利用这个位运算的性质加速我们的检查过程，在实际代码中，我们不断让当前的 nnn 与 n−1n - 1n−1 做与运算，直到 nnn 变为 000 即可。因为每次运算会使得 nnn 的最低位的 111 被翻转，因此运算次数就等于 nnn 的二进制位中 111 的个数。
     *
     */
    public int hammingWeight(int n) {
        int ret = 0;
        //当n=0，表明n中已经没有位1了
        while (n != 0) {
            n &= n - 1;
            ret++;
        }
        return ret;
    }

}
