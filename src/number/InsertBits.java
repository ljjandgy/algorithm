package number;

/**
 * @author ljj
 * @version sprint 39
 * @className InsertBits
 * @description
 * 给定两个整型数字 N 与 M，以及表示比特位置的 i 与 j（i <= j，且从 0 位开始计算）。
 *
 * 编写一种方法，使 M 对应的二进制数字插入 N 对应的二进制数字的第 i ~ j 位区域，不足之处用 0 补齐。具体插入过程如图所示。
 *
 * 题目保证从 i 位到 j 位足以容纳 M， 例如： M = 10011，则 i～j 区域至少可容纳 5 位。
 *
 * 示例1:
 *
 *  输入：N = 1024(10000000000), M = 19(10011), i = 2, j = 6
 *  输出：N = 1100(10001001100)
 *
 * @date 2021-03-25 18:17:32
 */
public class InsertBits {
    /**
     * 题目分析：
     * 题目核心就在于让m的二进制信息去替换n的特定位置的二进制信息，并且需要高位补0。所以直接采用位运算即可
     * 解题步骤：
     * 先把数N的j到i之间的位置0
     * M左移i位
     * 再用N或运算M
     *
     * 例 N = 1011 1111, M = 101, i = 2, j = 4
     *      (1<<(j-i+1))-1)<<i = 0001 1100
     * 取反后
     *      1110 0011
     * 对N于运算
     *      1011 1111 & 1110 0011 = 1010 0011
     * M左移动i位
     *     101 << i = 0001 0100
     * 最后M|N
     *     0001 0100 | 1010 0011 = 1011 0111 = 183
     */
    public int insertBits(int N, int M, int i, int j) {
        int mask=((1<<(j-i+1))-1)<<i;
        mask=~mask;
        N&=mask;
        M=M<<i;
        return M|N;
    }

}
